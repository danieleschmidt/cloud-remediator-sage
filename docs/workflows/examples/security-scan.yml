# Security Scanning Workflow - Cloud Remediator Sage
# Comprehensive security scanning pipeline
# Copy this file to .github/workflows/security-scan.yml

name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - container
          - infrastructure

env:
  NODE_VERSION: '18'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level moderate --json > npm-audit-results.json || true
          npm audit --audit-level moderate

      - name: Run Snyk dependency scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-results.json
          command: test

      - name: Run OSV vulnerability scanner
        run: |
          curl -L https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64 -o osv-scanner
          chmod +x osv-scanner
          ./osv-scanner --lockfile package-lock.json --format json --output osv-results.json || true

      - name: Generate dependency report
        run: |
          npx license-checker --json > license-report.json
          npm list --depth=0 --json > dependency-tree.json

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            npm-audit-results.json
            snyk-results.json
            osv-results.json
            license-report.json
            dependency-tree.json

  # Static code analysis
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint security plugin
        run: |
          npm run lint:security -- --format json --output-file eslint-security-results.json || true
          npm run lint:security

      - name: Run Semgrep static analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/javascript
            p/typescript
            p/owasp-top-ten
            p/nodejs
          generateSarif: "1"
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Bandit security linter (Python scripts)
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-results.json || true

      - name: Detect secrets with GitLeaks
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Upload static analysis results
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-results
          path: |
            eslint-security-results.json
            semgrep.sarif
            bandit-results.json

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: cloud-remediator-sage:security-scan

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cloud-remediator-sage:security-scan'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-filesystem-results.json'

      - name: Run Anchore container scan
        uses: anchore/scan-action@v3
        with:
          image: cloud-remediator-sage:security-scan
          format: json
          output-file: anchore-results.json

      - name: Run Docker Bench for Security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /etc:/etc:ro \
            --label docker_bench_security \
            docker/docker-bench-security > docker-bench-results.txt || true

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-results
          path: |
            trivy-container-results.sarif
            trivy-filesystem-results.json
            anchore-results.json
            docker-bench-results.txt

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

  # Infrastructure security scanning
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'infrastructure' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Run Checkov IaC scanner
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: true
          framework: terraform,dockerfile,secrets
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Run tfsec Terraform scanner
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: true
          format: sarif
          output: tfsec-results.sarif

      - name: Run Terrascan IaC scanner
        run: |
          curl -L "$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz
          tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
          ./terrascan scan -d . -o json > terrascan-results.json || true

      - name: Run Snyk Infrastructure as Code
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-iac-results.json

      - name: Upload infrastructure scan results
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-scan-results
          path: |
            checkov-results.sarif
            tfsec-results.sarif
            terrascan-results.json
            snyk-iac-results.json

      - name: Upload Checkov results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'checkov-results.sarif'

      - name: Upload tfsec results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'tfsec-results.sarif'

  # Dynamic application security testing
  dast-scan:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: cloud_security_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies and start application
        run: |
          npm ci
          npm run build
          NODE_ENV=test npm start &
          sleep 30

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          format: json
          output: zap-baseline-results.json

      - name: Run OWASP ZAP full scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3000'
          format: json
          output: zap-full-results.json

      - name: Upload DAST scan results
        uses: actions/upload-artifact@v4
        with:
          name: dast-scan-results
          path: |
            zap-baseline-results.json
            zap-full-results.json

  # Security report generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, static-analysis, container-scan, infrastructure-scan, dast-scan]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: scan-results/

      - name: Setup Python for report generation
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Generate consolidated security report
        run: |
          pip install jinja2 pyyaml
          python scripts/generate-security-report.py \
            --input-dir scan-results/ \
            --output security-report.html \
            --format html

      - name: Calculate security score
        run: |
          python scripts/calculate-security-score.py \
            --input-dir scan-results/ \
            --output security-score.json

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            security-report.html
            security-score.json

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const securityScore = JSON.parse(fs.readFileSync('security-score.json', 'utf8'));
            
            const comment = `
            ## 🔒 Security Scan Results
            
            **Overall Security Score**: ${securityScore.overall_score}/100
            
            | Scan Type | Score | Issues Found |
            |-----------|-------|--------------|
            | Dependencies | ${securityScore.dependency_score} | ${securityScore.dependency_issues} |
            | Static Analysis | ${securityScore.static_score} | ${securityScore.static_issues} |
            | Container | ${securityScore.container_score} | ${securityScore.container_issues} |
            | Infrastructure | ${securityScore.infrastructure_score} | ${securityScore.infrastructure_issues} |
            
            **Critical Issues**: ${securityScore.critical_issues}
            **High Issues**: ${securityScore.high_issues}
            **Medium Issues**: ${securityScore.medium_issues}
            
            [View Full Security Report](${securityScore.report_url})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Security notifications
  security-notifications:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [security-report]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'push')
    
    steps:
      - name: Download security report
        uses: actions/download-artifact@v4
        with:
          name: security-report

      - name: Check for critical vulnerabilities
        id: check-critical
        run: |
          CRITICAL_COUNT=$(jq -r '.critical_issues' security-score.json)
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "critical=true" >> $GITHUB_OUTPUT
            echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          else
            echo "critical=false" >> $GITHUB_OUTPUT
          fi

      - name: Notify security team of critical issues
        if: steps.check-critical.outputs.critical == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "#security-alerts",
              "username": "Security Scanner",
              "icon_emoji": ":warning:",
              "attachments": [{
                "color": "danger",
                "title": "🚨 Critical Security Vulnerabilities Detected",
                "text": "${{ steps.check-critical.outputs.critical_count }} critical security issues found in Cloud Remediator Sage",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  }
                ],
                "actions": [{
                  "type": "button",
                  "text": "View Security Report",
                  "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

      - name: Create security issue for critical vulnerabilities
        if: steps.check-critical.outputs.critical == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const securityScore = JSON.parse(fs.readFileSync('security-score.json', 'utf8'));
            
            const issueBody = `
            ## 🔒 Critical Security Vulnerabilities Detected
            
            **Scan Date**: ${new Date().toISOString()}
            **Commit**: ${context.sha}
            **Critical Issues**: ${securityScore.critical_issues}
            
            ### Summary
            ${securityScore.summary}
            
            ### Action Required
            - [ ] Review security scan results
            - [ ] Prioritize critical vulnerability fixes
            - [ ] Update dependencies with known vulnerabilities
            - [ ] Verify container image security
            
            ### Scan Results
            - Dependencies: ${securityScore.dependency_issues} issues
            - Static Analysis: ${securityScore.static_issues} issues  
            - Container: ${securityScore.container_issues} issues
            - Infrastructure: ${securityScore.infrastructure_issues} issues
            
            [View Full Security Report](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Critical Security Vulnerabilities - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['security', 'critical', 'vulnerability']
            });

# Required secrets to configure:
# - SNYK_TOKEN: Snyk authentication token
# - SEMGREP_APP_TOKEN: Semgrep authentication token  
# - SECURITY_SLACK_WEBHOOK_URL: Slack webhook for security alerts
#
# Required files to create:
# - scripts/generate-security-report.py: Security report generator
# - scripts/calculate-security-score.py: Security score calculator