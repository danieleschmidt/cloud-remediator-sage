# CD Pipeline - Cloud Remediator Sage
# This workflow handles deployment to staging and production
# Copy this file to .github/workflows/cd.yml

name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  # Pre-deployment validation
  pre-deployment:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      deploy-staging: ${{ steps.determine-deployment.outputs.deploy-staging }}
      deploy-production: ${{ steps.determine-deployment.outputs.deploy-production }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine deployment targets
        id: determine-deployment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
              echo "deploy-staging=true" >> $GITHUB_OUTPUT
              echo "deploy-production=false" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
              echo "deploy-staging=false" >> $GITHUB_OUTPUT
              echo "deploy-production=true" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "deploy-staging=true" >> $GITHUB_OUTPUT
            echo "deploy-production=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "deploy-staging=false" >> $GITHUB_OUTPUT
            echo "deploy-production=true" >> $GITHUB_OUTPUT
          else
            echo "deploy-staging=false" >> $GITHUB_OUTPUT
            echo "deploy-production=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(cat package.json | jq -r .version)-${GITHUB_SHA::8}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify CI pipeline passed
        if: github.event.inputs.force_deploy != 'true'
        run: |
          # Check if CI pipeline passed for this commit
          gh api repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs \
            --jq '.check_runs[] | select(.name == "Continuous Integration") | .conclusion' \
            | grep -q "success" || exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and push container image
  build-image:
    name: Build & Push Image
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.deploy-staging == 'true' || needs.pre-deployment.outputs.deploy-production == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/cloud-remediator-sage:${{ needs.pre-deployment.outputs.version }}
            ${{ steps.login-ecr.outputs.registry }}/cloud-remediator-sage:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan container image
        run: |
          aws ecr start-image-scan \
            --repository-name cloud-remediator-sage \
            --image-id imageTag=${{ needs.pre-deployment.outputs.version }}
          
          # Wait for scan to complete
          aws ecr wait image-scan-complete \
            --repository-name cloud-remediator-sage \
            --image-id imageTag=${{ needs.pre-deployment.outputs.version }}
          
          # Get scan results
          aws ecr describe-image-scan-findings \
            --repository-name cloud-remediator-sage \
            --image-id imageTag=${{ needs.pre-deployment.outputs.version }} \
            --query 'imageScanFindings.findingCounts'

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-image]
    if: needs.pre-deployment.outputs.deploy-staging == 'true'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials for staging
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Deploy to staging
        run: |
          serverless deploy --stage staging --verbose
        env:
          NEPTUNE_ENDPOINT: ${{ secrets.STAGING_NEPTUNE_ENDPOINT }}
          FINDINGS_BUCKET: ${{ secrets.STAGING_FINDINGS_BUCKET }}
          REMEDIATION_BUCKET: ${{ secrets.STAGING_REMEDIATION_BUCKET }}

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 60
          
          # Run basic health checks
          npm run test:smoke -- --env staging
        env:
          STAGING_API_URL: ${{ secrets.STAGING_API_URL }}

      - name: Update deployment status
        if: always()
        run: |
          STATUS="${{ job.status }}"
          gh api repos/${{ github.repository }}/deployments \
            -f ref=${{ github.sha }} \
            -f environment=staging \
            -f auto_merge=false
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Integration tests in staging
  staging-tests:
    name: Staging Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: needs.pre-deployment.outputs.deploy-staging == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run end-to-end tests
        run: npm run test:e2e -- --env staging
        env:
          STAGING_API_URL: ${{ secrets.STAGING_API_URL }}
          STAGING_NEPTUNE_ENDPOINT: ${{ secrets.STAGING_NEPTUNE_ENDPOINT }}

      - name: Run performance tests
        run: |
          npx k6 run tests/performance/staging-load-test.js \
            --env API_BASE_URL=${{ secrets.STAGING_API_URL }}

      - name: Security testing
        run: |
          # Run OWASP ZAP security scan
          docker run -t owasp/zap2docker-stable zap-baseline.py \
            -t ${{ secrets.STAGING_API_URL }}

  # Production deployment approval
  production-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: [pre-deployment, staging-tests]
    if: needs.pre-deployment.outputs.deploy-production == 'true'
    environment: production-approval
    
    steps:
      - name: Manual approval checkpoint
        run: |
          echo "Production deployment requires manual approval"
          echo "Review staging deployment and test results before proceeding"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-image, production-approval]
    if: needs.pre-deployment.outputs.deploy-production == 'true'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials for production
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_PRODUCTION_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PRODUCTION_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Create deployment backup
        run: |
          # Create Neptune backup before deployment
          aws neptune create-db-cluster-snapshot \
            --db-cluster-identifier cloud-remediator-neptune-prod \
            --db-cluster-snapshot-identifier pre-deployment-$(date +%Y%m%d-%H%M%S)

      - name: Deploy to production
        run: |
          serverless deploy --stage prod --verbose
        env:
          NEPTUNE_ENDPOINT: ${{ secrets.PRODUCTION_NEPTUNE_ENDPOINT }}
          FINDINGS_BUCKET: ${{ secrets.PRODUCTION_FINDINGS_BUCKET }}
          REMEDIATION_BUCKET: ${{ secrets.PRODUCTION_REMEDIATION_BUCKET }}

      - name: Verify production deployment
        run: |
          # Wait for deployment to be ready
          sleep 120
          
          # Run production health checks
          npm run test:health -- --env production
        env:
          PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}

      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  # Post-deployment monitoring
  post-deployment:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Monitor deployment health
        run: |
          # Monitor application metrics for 10 minutes
          for i in {1..20}; do
            # Check health endpoint
            if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
              curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
            elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
              curl -f ${{ secrets.STAGING_API_URL }}/health || exit 1
            fi
            
            # Check error rates
            # Add metrics validation here
            
            sleep 30
          done

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment validation failed, initiating rollback"
          # Add rollback logic here
          serverless rollback --stage prod || serverless rollback --stage staging

  # Notifications
  notify:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, post-deployment]
    if: always()
    
    steps:
      - name: Notify on successful staging deployment
        if: needs.deploy-staging.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: "🚀 Successfully deployed to staging: ${{ needs.pre-deployment.outputs.version }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on successful production deployment
        if: needs.deploy-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: "🎉 Successfully deployed to production: ${{ needs.pre-deployment.outputs.version }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          message: "❌ Deployment failed for ${{ needs.pre-deployment.outputs.version }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update status page
        if: needs.deploy-production.result == 'success'
        run: |
          # Update external status page
          curl -X POST "${{ secrets.STATUS_PAGE_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{"message": "Production deployment completed successfully", "status": "operational"}'

# Required secrets to configure:
# - AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY: For ECR access
# - AWS_STAGING_ACCESS_KEY_ID, AWS_STAGING_SECRET_ACCESS_KEY: Staging environment
# - AWS_PRODUCTION_ACCESS_KEY_ID, AWS_PRODUCTION_SECRET_ACCESS_KEY: Production environment
# - STAGING_*, PRODUCTION_*: Environment-specific configuration
# - SLACK_WEBHOOK_URL: Slack notifications
# - STATUS_PAGE_WEBHOOK: External status page updates
#
# Required environments to configure:
# - staging: Auto-deployment environment
# - production-approval: Manual approval required
# - production: Production deployment environment