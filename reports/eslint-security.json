[{"filePath":"/root/repo/src/backlog/discovery.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[991,1043],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2011,2071],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3433,3498],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[4368,4427],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const fs = require('fs');\nconst yaml = require('js-yaml');\nconst { execSync } = require('child_process');\n\nclass BacklogDiscovery {\n  constructor() {\n    this.backlogFile = './backlog.yml';\n    this.sources = ['yaml', 'github', 'codebase'];\n  }\n\n  async discoverAll() {\n    const items = [];\n    \n    // Load existing backlog\n    items.push(...this.loadYamlBacklog());\n    \n    // Discover from GitHub issues\n    items.push(...await this.discoverGitHubIssues());\n    \n    // Discover from codebase TODOs\n    items.push(...this.discoverCodebaseTodos());\n    \n    // Discover from failing tests\n    items.push(...this.discoverFailingTests());\n    \n    // Deduplicate and normalize\n    return this.deduplicateItems(items);\n  }\n\n  loadYamlBacklog() {\n    try {\n      if (!fs.existsSync(this.backlogFile)) return [];\n      \n      const content = fs.readFileSync(this.backlogFile, 'utf8');\n      const data = yaml.load(content);\n      \n      return data.backlog || [];\n    } catch (error) {\n      console.error('Error loading YAML backlog:', error);\n      return [];\n    }\n  }\n\n  async discoverGitHubIssues() {\n    try {\n      const issuesJson = execSync('gh issue list --json number,title,body,state,labels', { encoding: 'utf8' });\n      const issues = JSON.parse(issuesJson);\n      \n      return issues.map(issue => ({\n        id: `GH-${issue.number}`,\n        title: issue.title,\n        type: this.categorizeIssue(issue),\n        description: issue.body || '',\n        acceptance_criteria: this.extractAcceptanceCriteria(issue.body),\n        effort: this.estimateEffort(issue),\n        value: this.estimateValue(issue),\n        time_criticality: this.assessTimeCriticality(issue),\n        risk_reduction: this.assessRiskReduction(issue),\n        status: issue.state === 'open' ? 'NEW' : 'DONE',\n        risk_tier: this.assessRiskTier(issue),\n        created_at: new Date().toISOString().split('T')[0],\n        links: [`https://github.com/owner/repo/issues/${issue.number}`]\n      }));\n    } catch (error) {\n      console.warn('GitHub CLI not available or no issues found');\n      return [];\n    }\n  }\n\n  discoverCodebaseTodos() {\n    try {\n      const todoPattern = /(?:TODO|FIXME|XXX|HACK)(?:\\([^)]+\\))?\\s*:?\\s*(.+)/gi;\n      const items = [];\n      \n      const findCommand = 'find . -type f \\\\( -name \"*.js\" -o -name \"*.ts\" -o -name \"*.py\" \\\\) -exec grep -Hn \"TODO\\\\|FIXME\\\\|XXX\\\\|HACK\" {} \\\\;';\n      const output = execSync(findCommand, { encoding: 'utf8', cwd: process.cwd() });\n      \n      const lines = output.trim().split('\\n').filter(line => line);\n      \n      lines.forEach((line, index) => {\n        const [file, lineNum, content] = line.split(':', 3);\n        const match = content.match(todoPattern);\n        \n        if (match) {\n          items.push({\n            id: `TODO-${index + 1}`,\n            title: `Fix TODO: ${match[1] || content}`.slice(0, 80),\n            type: 'technical_debt',\n            description: `TODO found in ${file}:${lineNum} - ${content}`,\n            acceptance_criteria: [`Remove TODO comment in ${file}:${lineNum}`, 'Implement proper solution'],\n            effort: 2,\n            value: 3,\n            time_criticality: 2,\n            risk_reduction: 3,\n            status: 'NEW',\n            risk_tier: 'low',\n            created_at: new Date().toISOString().split('T')[0],\n            links: []\n          });\n        }\n      });\n      \n      return items;\n    } catch (error) {\n      console.warn('Error discovering codebase TODOs:', error.message);\n      return [];\n    }\n  }\n\n  discoverFailingTests() {\n    try {\n      const testOutput = execSync('npm test 2>&1 || true', { encoding: 'utf8' });\n      const items = [];\n      \n      // Look for test failures\n      if (testOutput.includes('FAIL') || testOutput.includes('failing')) {\n        items.push({\n          id: 'TEST-FAILURES',\n          title: 'Fix failing tests',\n          type: 'bug',\n          description: 'Some tests are currently failing and need to be fixed',\n          acceptance_criteria: ['All tests pass', 'Test coverage maintained'],\n          effort: 5,\n          value: 8,\n          time_criticality: 8,\n          risk_reduction: 8,\n          status: 'NEW',\n          risk_tier: 'high',\n          created_at: new Date().toISOString().split('T')[0],\n          links: []\n        });\n      }\n      \n      return items;\n    } catch (error) {\n      console.warn('Error checking test status:', error.message);\n      return [];\n    }\n  }\n\n  deduplicateItems(items) {\n    const seen = new Set();\n    return items.filter(item => {\n      const key = `${item.title}-${item.type}`;\n      if (seen.has(key)) return false;\n      seen.add(key);\n      return true;\n    });\n  }\n\n  categorizeIssue(issue) {\n    const labels = issue.labels?.map(l => l.name.toLowerCase()) || [];\n    const title = issue.title.toLowerCase();\n    \n    if (labels.includes('bug') || title.includes('bug') || title.includes('fix')) return 'bug';\n    if (labels.includes('enhancement') || title.includes('feature')) return 'feature';\n    if (labels.includes('documentation') || title.includes('doc')) return 'documentation';\n    if (labels.includes('security')) return 'security';\n    \n    return 'feature';\n  }\n\n  estimateEffort(issue) {\n    const labels = issue.labels?.map(l => l.name.toLowerCase()) || [];\n    \n    if (labels.includes('size/xs')) return 1;\n    if (labels.includes('size/s')) return 2;\n    if (labels.includes('size/m')) return 3;\n    if (labels.includes('size/l')) return 5;\n    if (labels.includes('size/xl')) return 8;\n    \n    // Default estimation based on title/description length\n    const textLength = (issue.title + (issue.body || '')).length;\n    if (textLength < 100) return 2;\n    if (textLength < 300) return 3;\n    if (textLength < 600) return 5;\n    return 8;\n  }\n\n  estimateValue(issue) {\n    const labels = issue.labels?.map(l => l.name.toLowerCase()) || [];\n    const title = issue.title.toLowerCase();\n    \n    if (labels.includes('critical') || labels.includes('security')) return 13;\n    if (labels.includes('high') || title.includes('security') || title.includes('critical')) return 8;\n    if (labels.includes('medium') || title.includes('important')) return 5;\n    if (labels.includes('low') || title.includes('nice to have')) return 3;\n    \n    return 5; // Default\n  }\n\n  assessTimeCriticality(issue) {\n    const labels = issue.labels?.map(l => l.name.toLowerCase()) || [];\n    const title = issue.title.toLowerCase();\n    \n    if (labels.includes('urgent') || title.includes('urgent') || title.includes('asap')) return 13;\n    if (labels.includes('security') || title.includes('security')) return 8;\n    if (labels.includes('bug') || title.includes('bug')) return 5;\n    \n    return 3; // Default\n  }\n\n  assessRiskReduction(issue) {\n    const labels = issue.labels?.map(l => l.name.toLowerCase()) || [];\n    const title = issue.title.toLowerCase();\n    \n    if (labels.includes('security') || title.includes('security') || title.includes('vulnerability')) return 13;\n    if (labels.includes('bug') || title.includes('bug') || title.includes('fix')) return 8;\n    if (title.includes('test') || title.includes('coverage')) return 5;\n    \n    return 3; // Default\n  }\n\n  assessRiskTier(issue) {\n    const labels = issue.labels?.map(l => l.name.toLowerCase()) || [];\n    const title = issue.title.toLowerCase();\n    \n    if (labels.includes('critical') || labels.includes('security') || title.includes('security')) return 'high';\n    if (labels.includes('bug') || title.includes('bug')) return 'medium';\n    \n    return 'low';\n  }\n\n  extractAcceptanceCriteria(body) {\n    if (!body) return [];\n    \n    // Look for acceptance criteria patterns\n    const patterns = [\n      /(?:acceptance criteria|ac):\\s*\\n((?:\\s*[-*]\\s*.+\\n?)+)/gi,\n      /(?:checklist|todo):\\s*\\n((?:\\s*[-*]\\s*.+\\n?)+)/gi\n    ];\n    \n    for (const pattern of patterns) {\n      const match = body.match(pattern);\n      if (match) {\n        return match[1].split('\\n')\n          .map(line => line.replace(/^\\s*[-*]\\s*/, '').trim())\n          .filter(line => line.length > 0);\n      }\n    }\n    \n    return [];\n  }\n}\n\nmodule.exports = BacklogDiscovery;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/root/repo/src/backlog/executor.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[805,862],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1007,1050],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1435,1507],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1625,1685],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1951,2008],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2294,2353],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2392,2438],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2620,2683],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3032,3081],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3126,3173],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3237,3276],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3351,3408],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3485,3543],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4461,4507],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4575,4616],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":166,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":166,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5022,5082],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5203,5240],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":177,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":177,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5295,5347],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":189,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":189,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5684,5733],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":194,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":194,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5783,5856],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":212,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":212,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6360,6419],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":218,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":218,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6530,6571],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":231,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":231,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6968,7013],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":246,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":246,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7399,7449],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":252,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":252,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7507,7544],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7790,7822],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":268,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":268,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7877,7927],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7989,8023],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":291,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":291,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8477,8531],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":294,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":294,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8567,8616],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":319,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":319,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9223,9291],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":325,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":325,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[9435,9503],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":353,"column":46,"nodeType":"MemberExpression","messageId":"unexpected","endLine":353,"endColumn":57,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10284,10338],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":354,"column":41,"nodeType":"MemberExpression","messageId":"unexpected","endLine":354,"endColumn":52,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10381,10430],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":355,"column":39,"nodeType":"MemberExpression","messageId":"unexpected","endLine":355,"endColumn":50,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10471,10518],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":356,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":356,"endColumn":36,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10545,10577],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":357,"column":29,"nodeType":"MemberExpression","messageId":"unexpected","endLine":357,"endColumn":40,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10608,10652],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":358,"column":39,"nodeType":"MemberExpression","messageId":"unexpected","endLine":358,"endColumn":50,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10693,10740],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":359,"column":31,"nodeType":"MemberExpression","messageId":"unexpected","endLine":359,"endColumn":42,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10773,10812],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":360,"column":38,"nodeType":"MemberExpression","messageId":"unexpected","endLine":360,"endColumn":49,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10852,10896],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":364,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":364,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11038,11085],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":367,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":367,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11129,11167],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":42,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const BacklogDiscovery = require('./discovery');\nconst WSJFScoring = require('./wsjf');\nconst SecurityChecker = require('./security');\nconst MetricsReporter = require('./metrics');\nconst { execSync } = require('child_process');\nconst fs = require('fs');\nconst yaml = require('js-yaml');\n\nclass BacklogExecutor {\n  constructor(options = {}) {\n    this.discovery = new BacklogDiscovery();\n    this.scoring = new WSJFScoring();\n    this.security = new SecurityChecker();\n    this.metrics = new MetricsReporter();\n    this.maxPRsPerDay = options.maxPRsPerDay || 5;\n    this.backlogFile = './backlog.yml';\n    this.metricsDir = './docs/status';\n    this.currentPRCount = 0;\n    this.ciFailureThreshold = 0.3;\n    this.prBackoffActive = false;\n    this.completedTasks = [];\n  }\n\n  async executeMainLoop() {\n    console.log('🚀 Starting Autonomous Backlog Management');\n    \n    let iteration = 0;\n    const maxIterations = 50; // Safety limit\n    \n    while (iteration < maxIterations) {\n      iteration++;\n      console.log(`\\n📋 Iteration ${iteration}`);\n      \n      try {\n        // Sync repo and check CI status\n        await this.syncRepoAndCI();\n        \n        // Discover and score backlog\n        const backlog = await this.discoverAndScore();\n        \n        // Check if we have actionable items\n        const nextTask = this.scoring.getNextReadyItem(backlog, this.getScopeFilter());\n        \n        if (!nextTask) {\n          console.log('✅ No actionable backlog items found. Execution complete!');\n          break;\n        }\n        \n        // Check PR throttling\n        if (this.shouldThrottlePRs()) {\n          console.log('⏸️  PR throttling active, skipping execution');\n          break;\n        }\n        \n        // Execute micro cycle for the task\n        const success = await this.executeMicroCycle(nextTask, backlog);\n        \n        if (success) {\n          await this.mergeAndLog(nextTask, backlog);\n        } else {\n          console.log(`❌ Failed to complete task: ${nextTask.id}`);\n          this.scoring.updateItemStatus(backlog, nextTask.id, 'BLOCKED');\n        }\n        \n        // Update metrics\n        await this.updateMetrics(backlog);\n        \n        // Save updated backlog\n        await this.saveBacklog(backlog);\n        \n      } catch (error) {\n        console.error(`❌ Error in iteration ${iteration}:`, error);\n        break;\n      }\n    }\n    \n    console.log('🏁 Backlog execution completed');\n  }\n\n  async syncRepoAndCI() {\n    try {\n      // Check git status\n      const status = execSync('git status --porcelain', { encoding: 'utf8' });\n      if (status.trim()) {\n        console.log('📦 Working directory has changes, committing...');\n        // Auto-commit any pending changes\n        execSync('git add .');\n        execSync('git commit -m \"chore: auto-commit pending changes\"');\n      }\n      \n      // Pull latest changes\n      execSync('git pull --rebase origin main');\n      \n      // Check CI failure rate\n      this.updatePRBackoffStatus();\n      \n    } catch (error) {\n      console.warn('⚠️  Sync warning:', error.message);\n    }\n  }\n\n  async discoverAndScore() {\n    console.log('🔍 Discovering backlog items...');\n    const items = await this.discovery.discoverAll();\n    \n    console.log('📊 Scoring with WSJF...');\n    const scoredItems = this.scoring.scoreAndSortBacklog(items);\n    \n    console.log(`Found ${scoredItems.length} backlog items`);\n    return scoredItems;\n  }\n\n  async executeMicroCycle(task, backlog) {\n    console.log(`\\n🔧 Executing: ${task.title} (${task.id})`);\n    \n    // Update status to DOING\n    this.scoring.updateItemStatus(backlog, task.id, 'DOING');\n    \n    try {\n      // Step 1: Clarify acceptance criteria\n      if (!task.acceptance_criteria || task.acceptance_criteria.length === 0) {\n        task.acceptance_criteria = this.generateAcceptanceCriteria(task);\n      }\n      \n      // Step 2: TDD Cycle\n      const tddSuccess = await this.executeTDDCycle(task);\n      if (!tddSuccess) return false;\n      \n      // Step 3: Security checks\n      const securityPass = await this.runSecurityChecks();\n      if (!securityPass) return false;\n      \n      // Step 4: Documentation updates\n      await this.updateDocumentation(task);\n      \n      // Step 5: CI gate\n      const ciPass = await this.runCIGate();\n      if (!ciPass) return false;\n      \n      // Step 6: Prepare PR\n      await this.preparePR(task);\n      \n      return true;\n      \n    } catch (error) {\n      console.error(`❌ Micro cycle failed:`, error);\n      return false;\n    }\n  }\n\n  async executeTDDCycle(task) {\n    console.log('🧪 Executing TDD cycle...');\n    \n    try {\n      // RED: Write failing test (if it's a feature/bug)\n      if (['feature', 'bug'].includes(task.type)) {\n        await this.writeFailingTest(task);\n      }\n      \n      // GREEN: Make it pass\n      await this.implementSolution(task);\n      \n      // Verify tests pass\n      const testResult = execSync('npm test', { encoding: 'utf8' });\n      if (testResult.includes('FAIL')) {\n        console.error('❌ Tests still failing after implementation');\n        return false;\n      }\n      \n      // REFACTOR: Clean up code\n      await this.refactorCode(task);\n      \n      console.log('✅ TDD cycle completed');\n      return true;\n      \n    } catch (error) {\n      console.error('❌ TDD cycle failed:', error.message);\n      return false;\n    }\n  }\n\n  async writeFailingTest(task) {\n    // Generate basic test structure based on task type\n    const testTemplate = this.generateTestTemplate(task);\n    const testFile = `tests/${task.id.toLowerCase()}.test.js`;\n    \n    if (!fs.existsSync(testFile)) {\n      fs.writeFileSync(testFile, testTemplate);\n      console.log(`📝 Created test file: ${testFile}`);\n    }\n  }\n\n  async implementSolution(task) {\n    console.log(`⚙️  Implementing solution for ${task.type}: ${task.title}`);\n    \n    // This is a simplified implementation - in practice, this would use\n    // AI code generation or template-based code generation\n    switch (task.type) {\n      case 'feature':\n        await this.implementFeature(task);\n        break;\n      case 'bug':\n        await this.fixBug(task);\n        break;\n      case 'documentation':\n        await this.updateDocs(task);\n        break;\n      case 'infrastructure':\n        await this.updateInfrastructure(task);\n        break;\n      default:\n        console.log(`ℹ️  Generic implementation for ${task.type}`);\n    }\n  }\n\n  async implementFeature(task) {\n    // Feature implementation logic based on task description\n    console.log('✨ Implementing feature...');\n    \n    // For the cloud remediator, check specific features\n    if (task.title.includes('Prowler')) {\n      await this.implementProwlerIntegration(task);\n    } else if (task.title.includes('Neptune')) {\n      await this.implementNeptuneSchema(task);\n    } else if (task.title.includes('risk scoring')) {\n      await this.implementRiskScoring(task);\n    }\n  }\n\n  async runSecurityChecks() {\n    console.log('🔒 Running security checks...');\n    \n    try {\n      // SAST scan\n      const sastResult = await this.security.runSAST();\n      \n      // SCA scan  \n      const scaResult = await this.security.runSCA();\n      \n      // Input validation check\n      const validationResult = await this.security.checkInputValidation();\n      \n      return sastResult && scaResult && validationResult;\n      \n    } catch (error) {\n      console.error('❌ Security checks failed:', error);\n      return false;\n    }\n  }\n\n  async runCIGate() {\n    console.log('🚦 Running CI gate...');\n    \n    try {\n      // Lint\n      execSync('npm run lint', { encoding: 'utf8' });\n      \n      // Tests\n      execSync('npm test', { encoding: 'utf8' });\n      \n      // Build\n      execSync('npm run build', { encoding: 'utf8' });\n      \n      console.log('✅ CI gate passed');\n      return true;\n      \n    } catch (error) {\n      console.error('❌ CI gate failed:', error.message);\n      return false;\n    }\n  }\n\n  async preparePR(task) {\n    console.log('📋 Preparing PR...');\n    \n    const branchName = `terragon/auto-${task.id.toLowerCase()}`;\n    \n    try {\n      // Create branch\n      execSync(`git checkout -b ${branchName}`);\n      \n      // Commit changes\n      execSync('git add .');\n      const commitMessage = this.generateCommitMessage(task);\n      execSync(`git commit -m \"${commitMessage}\"`);\n      \n      // Push branch\n      execSync(`git push -u origin ${branchName}`);\n      \n      this.currentPRCount++;\n      console.log(`✅ PR prepared on branch: ${branchName}`);\n      \n    } catch (error) {\n      console.error('❌ PR preparation failed:', error);\n      throw error;\n    }\n  }\n\n  getScopeFilter() {\n    // Return filter function for automation scope\n    return (_item) => {\n      // For now, allow all items in the repo\n      return true;\n    };\n  }\n\n  shouldThrottlePRs() {\n    return this.prBackoffActive || this.currentPRCount >= this.maxPRsPerDay;\n  }\n\n  updatePRBackoffStatus() {\n    // Check CI failure rate over last 24h and adjust PR throttling\n    try {\n      const failureRate = this.calculateCIFailureRate();\n      \n      if (failureRate > this.ciFailureThreshold) {\n        this.prBackoffActive = true;\n        this.maxPRsPerDay = 2;\n        console.log('⏸️  PR backoff activated due to high CI failure rate');\n      } else if (failureRate < 0.1) {\n        this.prBackoffActive = false;\n        this.maxPRsPerDay = 5;\n      }\n    } catch (error) {\n      console.warn('Could not calculate CI failure rate:', error.message);\n    }\n  }\n\n  calculateCIFailureRate() {\n    // Simplified - would integrate with actual CI metrics\n    return 0.1; // 10% failure rate\n  }\n\n  generateCommitMessage(task) {\n    const typeMap = {\n      'feature': 'feat',\n      'bug': 'fix',\n      'documentation': 'docs',\n      'infrastructure': 'chore'\n    };\n    \n    const type = typeMap[task.type] || 'chore';\n    return `${type}: ${task.title}\\n\\n🤖 Generated with Claude Code\\n\\nCo-Authored-By: Claude <noreply@anthropic.com>`;\n  }\n\n  async saveBacklog(items) {\n    const backlogData = { backlog: items };\n    const yamlContent = yaml.dump(backlogData, { indent: 2 });\n    fs.writeFileSync(this.backlogFile, yamlContent);\n  }\n\n  // Placeholder methods for specific implementations\n  async implementProwlerIntegration(_task) { console.log('🔍 Implementing Prowler integration...'); }\n  async implementNeptuneSchema(_task) { console.log('🔗 Implementing Neptune schema...'); }\n  async implementRiskScoring(_task) { console.log('📊 Implementing risk scoring...'); }\n  async fixBug(_task) { console.log('🐛 Fixing bug...'); }\n  async updateDocs(_task) { console.log('📚 Updating documentation...'); }\n  async updateInfrastructure(_task) { console.log('🏗️  Updating infrastructure...'); }\n  async refactorCode(_task) { console.log('♻️  Refactoring code...'); }\n  async updateDocumentation(_task) { console.log('📝 Updating documentation...'); }\n  async mergeAndLog(task, backlog) { \n    this.scoring.updateItemStatus(backlog, task.id, 'DONE');\n    this.completedTasks.push(task);\n    console.log(`✅ Task completed: ${task.title}`); \n  }\n  async updateMetrics(backlog) { \n    console.log('📈 Updating metrics...');\n    await this.metrics.generateDailyReport(backlog, this.completedTasks);\n  }\n  \n  generateAcceptanceCriteria(_task) {\n    return [\n      'Implementation follows existing code patterns',\n      'All tests pass',\n      'Documentation is updated',\n      'Security checks pass'\n    ];\n  }\n  \n  generateTestTemplate(task) {\n    return `const { describe, test, expect } = require('@jest/globals');\n\ndescribe('${task.title}', () => {\n  test('should implement ${task.type} functionality', () => {\n    // TODO: Implement test for ${task.id}\n    expect(true).toBe(true);\n  });\n});\n`;\n  }\n}\n\nmodule.exports = BacklogExecutor;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/root/repo/src/backlog/index.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":14,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":14,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[274,327],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[332,392],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[397,425],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[694,766],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[802,868],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1027,1082],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1169,1232],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":59,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":59,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1517,1561],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1720,1757],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\nconst BacklogExecutor = require('./executor');\nconst fs = require('fs');\n\nclass AutonomousBacklogManager {\n  constructor() {\n    this.executor = new BacklogExecutor({\n      maxPRsPerDay: process.env.MAX_PRS_PER_DAY || 5\n    });\n  }\n\n  async run() {\n    console.log('🤖 AUTONOMOUS SENIOR CODING ASSISTANT');\n    console.log('📋 DISCOVER, PRIORITIZE, EXECUTE ALL BACKLOG');\n    console.log('═'.repeat(50));\n    \n    try {\n      // Check automation scope\n      this.checkAutomationScope();\n      \n      // Initialize required directories\n      this.initializeDirectories();\n      \n      // Run the main execution loop\n      await this.executor.executeMainLoop();\n      \n      console.log('\\n✅ Autonomous backlog management completed successfully');\n      \n    } catch (error) {\n      console.error('\\n❌ Autonomous backlog management failed:', error);\n      process.exit(1);\n    }\n  }\n\n  checkAutomationScope() {\n    const scopeFile = './.automation-scope.yaml';\n    \n    if (fs.existsSync(scopeFile)) {\n      console.log('📋 Found automation scope configuration');\n      // In practice, this would parse and validate the scope file\n    } else {\n      console.log('📋 Using default scope: current repository only');\n    }\n  }\n\n  initializeDirectories() {\n    const dirs = [\n      './docs/status',\n      './docs/sbom',\n      './reports',\n      './cache/nvd',\n      './security'\n    ];\n\n    dirs.forEach(dir => {\n      if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir, { recursive: true });\n        console.log(`📁 Created directory: ${dir}`);\n      }\n    });\n  }\n}\n\n// CLI interface\nif (require.main === module) {\n  const manager = new AutonomousBacklogManager();\n  manager.run().catch(error => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = AutonomousBacklogManager;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/root/repo/src/backlog/metrics.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1732,1797],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":78,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":78,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2896,2963],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":208,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":208,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[6575,6638],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":425,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":425,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13676,13742],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const fs = require('fs');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\nclass MetricsReporter {\n  constructor() {\n    this.statusDir = './docs/status';\n    this.metricsFile = path.join(this.statusDir, 'metrics.prom');\n  }\n\n  async generateDailyReport(backlog, completedTasks = []) {\n    const timestamp = new Date().toISOString();\n    const date = timestamp.split('T')[0];\n    \n    \n    // Generate JSON report\n    const jsonReport = {\n      timestamp,\n      completed_ids: completedTasks.map(task => task.id),\n      coverage_delta: await this.calculateCoverageDelta(),\n      flaky_tests: await this.detectFlakyTests(),\n      ci_summary: await this.getCISummary(),\n      open_prs: await this.getOpenPRCount(),\n      risks_or_blocks: await this.identifyRisksAndBlocks(backlog),\n      backlog_size_by_status: this.getBacklogByStatus(backlog),\n      avg_cycle_time: this.calculateAverageCycleTime(completedTasks),\n      dora: await this.calculateDORAMetrics(),\n      rerere_auto_resolved_total: await this.getRerereMetrics(),\n      merge_driver_hits_total: await this.getMergeDriverHits(),\n      ci_failure_rate: await this.calculateCIFailureRate(),\n      pr_backoff_state: this.getPRBackoffState(),\n      wsjf_snapshot: this.getTopWSJFItems(backlog)\n    };\n\n    // Generate Markdown report\n    const mdReport = this.generateMarkdownReport(jsonReport);\n\n    // Save reports\n    const jsonFile = path.join(this.statusDir, `${date}.json`);\n    const mdFile = path.join(this.statusDir, `${date}.md`);\n    \n    fs.writeFileSync(jsonFile, JSON.stringify(jsonReport, null, 2));\n    fs.writeFileSync(mdFile, mdReport);\n\n    // Update Prometheus metrics\n    await this.updatePrometheusMetrics(jsonReport);\n\n    console.log(`📊 Daily report generated: ${jsonFile}, ${mdFile}`);\n    return jsonReport;\n  }\n\n  async calculateMetrics(backlog, _completedTasks) {\n    const totalItems = backlog.length;\n    const completedCount = backlog.filter(item => item.status === 'DONE').length;\n    const inProgressCount = backlog.filter(item => ['DOING', 'PR'].includes(item.status)).length;\n    const readyCount = backlog.filter(item => item.status === 'READY').length;\n\n    return {\n      total_items: totalItems,\n      completed_count: completedCount,\n      in_progress_count: inProgressCount,\n      ready_count: readyCount,\n      completion_rate: totalItems > 0 ? (completedCount / totalItems * 100).toFixed(1) : 0\n    };\n  }\n\n  async calculateCoverageDelta() {\n    try {\n      // Run coverage and compare with previous\n      execSync('npm run test -- --coverage --coverageReporters=json', { encoding: 'utf8' });\n      \n      // Parse coverage JSON (simplified)\n      const currentCoverage = 85; // Placeholder\n      const previousCoverage = 83; // Would load from previous report\n      \n      return ((currentCoverage - previousCoverage) * 100).toFixed(1);\n    } catch (error) {\n      console.warn('Could not calculate coverage delta:', error.message);\n      return \"0.0\";\n    }\n  }\n\n  async detectFlakyTests() {\n    try {\n      // Look for tests that have failed in recent runs\n      const testOutput = execSync('npm test 2>&1 || true', { encoding: 'utf8' });\n      \n      // Simple flaky test detection (would be more sophisticated in practice)\n      const flakyPatterns = [\n        /timeout/i,\n        /intermittent/i,\n        /flaky/i,\n        /random/i\n      ];\n\n      const flakyTests = [];\n      for (const pattern of flakyPatterns) {\n        if (pattern.test(testOutput)) {\n          flakyTests.push('Potential flaky test detected in output');\n        }\n      }\n\n      return flakyTests;\n    } catch (error) {\n      return [];\n    }\n  }\n\n  async getCISummary() {\n    try {\n      // Check recent CI status (simplified)\n      const status = execSync('git log --oneline -10', { encoding: 'utf8' });\n      return status.includes('fix') ? 'some_failures' : 'passing';\n    } catch {\n      return 'unknown';\n    }\n  }\n\n  async getOpenPRCount() {\n    try {\n      const prs = execSync('gh pr list --json number', { encoding: 'utf8' });\n      return JSON.parse(prs).length;\n    } catch {\n      return 0;\n    }\n  }\n\n  async identifyRisksAndBlocks(backlog) {\n    const risks = [];\n    \n    // Identify blocked items\n    const blockedItems = backlog.filter(item => item.status === 'BLOCKED');\n    if (blockedItems.length > 0) {\n      risks.push(`${blockedItems.length} items are blocked`);\n    }\n\n    // Identify high-risk items without progress\n    const highRiskStale = backlog.filter(item => \n      item.risk_tier === 'high' && \n      item.status === 'NEW' &&\n      this.isStale(item.created_at)\n    );\n    \n    if (highRiskStale.length > 0) {\n      risks.push(`${highRiskStale.length} high-risk items are stale`);\n    }\n\n    // Check for security vulnerabilities\n    try {\n      const auditOutput = execSync('npm audit --json 2>/dev/null || echo \"{}\"', { encoding: 'utf8' });\n      const audit = JSON.parse(auditOutput);\n      const criticalVulns = audit.metadata?.vulnerabilities?.critical || 0;\n      \n      if (criticalVulns > 0) {\n        risks.push(`${criticalVulns} critical security vulnerabilities`);\n      }\n    } catch {\n      // Ignore audit errors\n    }\n\n    return risks;\n  }\n\n  getBacklogByStatus(backlog) {\n    return backlog.reduce((acc, item) => {\n      acc[item.status] = (acc[item.status] || 0) + 1;\n      return acc;\n    }, {});\n  }\n\n  calculateAverageCycleTime(completedTasks) {\n    if (completedTasks.length === 0) return 0;\n\n    const cycleTimes = completedTasks\n      .filter(task => task.created_at && task.completed_at)\n      .map(task => {\n        const created = new Date(task.created_at);\n        const completed = new Date(task.completed_at);\n        return (completed - created) / (1000 * 60 * 60); // hours\n      });\n\n    if (cycleTimes.length === 0) return 0;\n\n    return Math.round(cycleTimes.reduce((sum, time) => sum + time, 0) / cycleTimes.length);\n  }\n\n  async calculateDORAMetrics() {\n    try {\n      // Deployment frequency (deployments per day)\n      const deployFreq = await this.calculateDeploymentFrequency();\n      \n      // Lead time for changes (hours from commit to deploy)\n      const leadTime = await this.calculateLeadTime();\n      \n      // Change failure rate (percentage)\n      const changeFailRate = await this.calculateChangeFailureRate();\n      \n      // Mean time to recovery (hours)\n      const mttr = await this.calculateMTTR();\n\n      return {\n        deploy_freq: deployFreq,\n        lead_time: leadTime,\n        change_fail_rate: changeFailRate,\n        mttr: mttr\n      };\n    } catch (error) {\n      console.warn('Error calculating DORA metrics:', error.message);\n      return {\n        deploy_freq: \"0\",\n        lead_time: \"0\",\n        change_fail_rate: \"0\",\n        mttr: \"0\"\n      };\n    }\n  }\n\n  async calculateDeploymentFrequency() {\n    try {\n      // Count commits to main in last 24 hours as deployments\n      const commits = execSync('git log --oneline --since=\"24 hours ago\" origin/main', { encoding: 'utf8' });\n      return commits.trim().split('\\n').filter(line => line).length.toString();\n    } catch {\n      return \"0\";\n    }\n  }\n\n  async calculateLeadTime() {\n    try {\n      // Simplified: average time between PR creation and merge\n      const prs = execSync('gh pr list --state merged --limit 10 --json createdAt,mergedAt', { encoding: 'utf8' });\n      const prData = JSON.parse(prs);\n      \n      if (prData.length === 0) return \"0\";\n      \n      const leadTimes = prData.map(pr => {\n        const created = new Date(pr.createdAt);\n        const merged = new Date(pr.mergedAt);\n        return (merged - created) / (1000 * 60 * 60); // hours\n      });\n      \n      const avgLeadTime = leadTimes.reduce((sum, time) => sum + time, 0) / leadTimes.length;\n      return Math.round(avgLeadTime).toString();\n    } catch {\n      return \"0\";\n    }\n  }\n\n  async calculateChangeFailureRate() {\n    try {\n      // Look for incident-labeled issues or revert commits\n      const incidents = execSync('gh issue list --label \"type:incident\" --state closed --limit 50 --json number', { encoding: 'utf8' });\n      const incidentData = JSON.parse(incidents);\n      \n      const deployments = await this.calculateDeploymentFrequency();\n      const failureRate = deployments > 0 ? (incidentData.length / parseInt(deployments) * 100) : 0;\n      \n      return Math.min(failureRate, 100).toFixed(1);\n    } catch {\n      return \"0\";\n    }\n  }\n\n  async calculateMTTR() {\n    try {\n      // Average time to close incident-labeled issues\n      const incidents = execSync('gh issue list --label \"type:incident\" --state closed --limit 10 --json createdAt,closedAt', { encoding: 'utf8' });\n      const incidentData = JSON.parse(incidents);\n      \n      if (incidentData.length === 0) return \"0\";\n      \n      const resolutionTimes = incidentData.map(incident => {\n        const created = new Date(incident.createdAt);\n        const closed = new Date(incident.closedAt);\n        return (closed - created) / (1000 * 60 * 60); // hours\n      });\n      \n      const avgMTTR = resolutionTimes.reduce((sum, time) => sum + time, 0) / resolutionTimes.length;\n      return Math.round(avgMTTR).toString();\n    } catch {\n      return \"0\";\n    }\n  }\n\n  async getRerereMetrics() {\n    try {\n      // Count rerere cache entries\n      const rerereDir = '.git/rr-cache';\n      if (fs.existsSync(rerereDir)) {\n        const entries = fs.readdirSync(rerereDir);\n        return entries.length;\n      }\n      return 0;\n    } catch {\n      return 0;\n    }\n  }\n\n  async getMergeDriverHits() {\n    try {\n      // Count recent merges that used custom merge drivers\n      const gitLog = execSync('git log --oneline --since=\"24 hours ago\" --grep=\"merge\"', { encoding: 'utf8' });\n      return gitLog.trim().split('\\n').filter(line => line).length;\n    } catch {\n      return 0;\n    }\n  }\n\n  async calculateCIFailureRate() {\n    try {\n      // Simplified CI failure rate calculation\n      const recentCommits = execSync('git log --oneline -20', { encoding: 'utf8' });\n      const totalCommits = recentCommits.trim().split('\\n').length;\n      const fixCommits = recentCommits.split('\\n').filter(line => line.includes('fix')).length;\n      \n      return totalCommits > 0 ? ((fixCommits / totalCommits) * 100).toFixed(1) : \"0\";\n    } catch {\n      return \"0\";\n    }\n  }\n\n  getPRBackoffState() {\n    // Would check actual backoff state from executor\n    return \"inactive\";\n  }\n\n  getTopWSJFItems(backlog) {\n    return backlog\n      .filter(item => ['NEW', 'REFINED', 'READY'].includes(item.status))\n      .slice(0, 5)\n      .map(item => ({\n        id: item.id,\n        title: item.title,\n        wsjf: item.wsjf?.final_wsjf || 0,\n        status: item.status\n      }));\n  }\n\n  generateMarkdownReport(report) {\n    return `# Autonomous Backlog Management Report\n\n**Generated:** ${report.timestamp}\n\n## Summary\n\n- **Completed Tasks:** ${report.completed_ids.length}\n- **Open PRs:** ${report.open_prs}\n- **Coverage Delta:** ${report.coverage_delta}%\n- **CI Status:** ${report.ci_summary}\n\n## Backlog Status\n\n${Object.entries(report.backlog_size_by_status)\n  .map(([status, count]) => `- **${status}:** ${count}`)\n  .join('\\n')}\n\n## DORA Metrics\n\n- **Deployment Frequency:** ${report.dora.deploy_freq} per day\n- **Lead Time:** ${report.dora.lead_time} hours\n- **Change Failure Rate:** ${report.dora.change_fail_rate}%\n- **MTTR:** ${report.dora.mttr} hours\n\n## Top Priority Items (WSJF)\n\n${report.wsjf_snapshot\n  .map((item, i) => `${i + 1}. **${item.title}** (${item.id}) - WSJF: ${item.wsjf}`)\n  .join('\\n')}\n\n## Risks & Blocks\n\n${report.risks_or_blocks.length > 0 \n  ? report.risks_or_blocks.map(risk => `- ⚠️  ${risk}`).join('\\n')\n  : '✅ No risks or blocks identified'\n}\n\n## Automation Metrics\n\n- **Rerere Auto-Resolved:** ${report.rerere_auto_resolved_total}\n- **Merge Driver Hits:** ${report.merge_driver_hits_total}\n- **CI Failure Rate:** ${report.ci_failure_rate}%\n- **PR Backoff State:** ${report.pr_backoff_state}\n\n---\n*🤖 Generated with Claude Code*\n`;\n  }\n\n  async updatePrometheusMetrics(report) {\n    const metrics = [\n      `# HELP backlog_items_total Total number of backlog items`,\n      `# TYPE backlog_items_total gauge`,\n      `backlog_items_total{status=\"total\"} ${Object.values(report.backlog_size_by_status).reduce((a, b) => a + b, 0)}`,\n      ...Object.entries(report.backlog_size_by_status).map(([status, count]) => \n        `backlog_items_total{status=\"${status.toLowerCase()}\"} ${count}`\n      ),\n      '',\n      `# HELP dora_deployment_frequency_per_day DORA deployment frequency`,\n      `# TYPE dora_deployment_frequency_per_day gauge`,\n      `dora_deployment_frequency_per_day ${report.dora.deploy_freq}`,\n      '',\n      `# HELP dora_lead_time_hours DORA lead time in hours`,\n      `# TYPE dora_lead_time_hours gauge`, \n      `dora_lead_time_hours ${report.dora.lead_time}`,\n      '',\n      `# HELP dora_change_failure_rate_percent DORA change failure rate`,\n      `# TYPE dora_change_failure_rate_percent gauge`,\n      `dora_change_failure_rate_percent ${report.dora.change_fail_rate}`,\n      '',\n      `# HELP dora_mttr_hours DORA mean time to recovery in hours`,\n      `# TYPE dora_mttr_hours gauge`,\n      `dora_mttr_hours ${report.dora.mttr}`,\n      '',\n      `# HELP rerere_auto_resolved_total Conflicts auto-resolved by rerere`,\n      `# TYPE rerere_auto_resolved_total counter`,\n      `rerere_auto_resolved_total ${report.rerere_auto_resolved_total}`,\n      '',\n      `# HELP ci_failure_rate_percent CI pipeline failure rate`,\n      `# TYPE ci_failure_rate_percent gauge`,\n      `ci_failure_rate_percent ${report.ci_failure_rate}`,\n      ''\n    ].join('\\n');\n\n    fs.writeFileSync(this.metricsFile, metrics);\n    console.log(`📊 Prometheus metrics updated: ${this.metricsFile}`);\n  }\n\n  isStale(createdAt, days = 7) {\n    if (!createdAt) return false;\n    const created = new Date(createdAt);\n    const now = new Date();\n    const daysDiff = (now - created) / (1000 * 60 * 60 * 24);\n    return daysDiff > days;\n  }\n}\n\nmodule.exports = MetricsReporter;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/root/repo/src/backlog/security.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[247,286],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[546,596],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[651,689],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1189,1258],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1336,1385],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1454,1501],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[1806,1886],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1930,1978],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2033,2096],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2167,2216],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2496,2575],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2619,2669],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2724,2789],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2850,2887],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3370,3415],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3627,3694],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3785,3841],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4454,4506],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":168,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":168,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4861,4922],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5209,5249],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[5695,5794],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":199,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":199,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5838,5872],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":210,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":210,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[6348,6447],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":253,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":253,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[7555,7623],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":283,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":283,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[8415,8477],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":326,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":326,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9562,9612],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":329,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":329,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9660,9721],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":356,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":356,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10159,10203],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { execSync } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\nclass SecurityChecker {\n  constructor() {\n    this.nvdCacheDir = './cache/nvd';\n    this.sbomDir = './docs/sbom';\n  }\n\n  async runSAST() {\n    console.log('🔍 Running SAST scan...');\n    \n    try {\n      // Use CodeQL if available, fallback to ESLint security plugin\n      if (this.isCodeQLAvailable()) {\n        return await this.runCodeQL();\n      } else {\n        return await this.runESLintSecurity();\n      }\n    } catch (error) {\n      console.error('SAST scan failed:', error.message);\n      return false;\n    }\n  }\n\n  async runSCA() {\n    console.log('🔍 Running SCA scan...');\n    \n    try {\n      // Use OWASP Dependency-Check with cached NVD database\n      await this.ensureNVDCache();\n      \n      const command = `dependency-check --scan . --format JSON --out ./reports/dependency-check.json --data ${this.nvdCacheDir} --suppression ./security/dependency-check-suppressions.xml`;\n      \n      try {\n        execSync(command, { encoding: 'utf8' });\n        return await this.analyzeDependencyCheckResults();\n      } catch (error) {\n        // Fallback to npm audit\n        console.log('🔄 Dependency-Check not available, using npm audit...');\n        return await this.runNpmAudit();\n      }\n    } catch (error) {\n      console.error('SCA scan failed:', error.message);\n      return false;\n    }\n  }\n\n  async checkInputValidation() {\n    console.log('🔍 Checking input validation...');\n    \n    try {\n      const jsFiles = this.findJavaScriptFiles();\n      let validationIssues = 0;\n      \n      for (const file of jsFiles) {\n        const issues = await this.analyzeFileForInputValidation(file);\n        validationIssues += issues;\n      }\n      \n      if (validationIssues > 0) {\n        console.warn(`⚠️  Found ${validationIssues} potential input validation issues`);\n        return false;\n      }\n      \n      console.log('✅ Input validation checks passed');\n      return true;\n      \n    } catch (error) {\n      console.error('Input validation check failed:', error.message);\n      return false;\n    }\n  }\n\n  async checkSecretsManagement() {\n    console.log('🔍 Checking secrets management...');\n    \n    try {\n      const files = this.findSourceFiles();\n      let secretsIssues = 0;\n      \n      for (const file of files) {\n        const issues = await this.analyzeFileForSecrets(file);\n        secretsIssues += issues;\n      }\n      \n      if (secretsIssues > 0) {\n        console.warn(`⚠️  Found ${secretsIssues} potential secrets management issues`);\n        return false;\n      }\n      \n      console.log('✅ Secrets management checks passed');\n      return true;\n      \n    } catch (error) {\n      console.error('Secrets management check failed:', error.message);\n      return false;\n    }\n  }\n\n  async generateSBOM() {\n    console.log('📋 Generating SBOM...');\n    \n    try {\n      // Ensure SBOM directory exists\n      if (!fs.existsSync(this.sbomDir)) {\n        fs.mkdirSync(this.sbomDir, { recursive: true });\n      }\n      \n      const timestamp = new Date().toISOString().split('T')[0];\n      const sbomFile = path.join(this.sbomDir, `sbom-${timestamp}.json`);\n      \n      // Use CycloneDX to generate SBOM\n      const command = `cyclonedx-bom -o ${sbomFile}`;\n      \n      try {\n        execSync(command, { encoding: 'utf8' });\n        console.log(`✅ SBOM generated: ${sbomFile}`);\n        \n        // Compare with previous SBOM if exists\n        await this.compareSBOMs(sbomFile);\n        \n        return true;\n      } catch (error) {\n        // Fallback to simple dependency listing\n        console.log('🔄 CycloneDX not available, creating simple SBOM...');\n        return await this.createSimpleSBOM(sbomFile);\n      }\n    } catch (error) {\n      console.error('SBOM generation failed:', error.message);\n      return false;\n    }\n  }\n\n  isCodeQLAvailable() {\n    try {\n      execSync('codeql version', { encoding: 'utf8', stdio: 'pipe' });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async runCodeQL() {\n    try {\n      // Create CodeQL database\n      execSync('codeql database create ./codeql-db --language=javascript', { encoding: 'utf8' });\n      \n      // Run security queries\n      execSync('codeql database analyze ./codeql-db --format=json --output=./reports/codeql-results.json', { encoding: 'utf8' });\n      \n      return await this.analyzeCodeQLResults();\n    } catch (error) {\n      console.error('CodeQL scan failed:', error.message);\n      return false;\n    }\n  }\n\n  async runESLintSecurity() {\n    try {\n      // Check if security plugin is available\n      const command = 'npx eslint --ext .js src/ --format json > ./reports/eslint-security.json || true';\n      execSync(command, { encoding: 'utf8' });\n      \n      return await this.analyzeESLintResults();\n    } catch (error) {\n      console.error('ESLint security scan failed:', error.message);\n      return false;\n    }\n  }\n\n  async ensureNVDCache() {\n    if (!fs.existsSync(this.nvdCacheDir)) {\n      fs.mkdirSync(this.nvdCacheDir, { recursive: true });\n    }\n    \n    // Check if cache is older than 7 days\n    const cacheAge = this.getCacheAge();\n    if (cacheAge > 7) {\n      console.log('🔄 Updating NVD cache...');\n      // In practice, this would download/update the NVD cache\n    }\n  }\n\n  async runNpmAudit() {\n    try {\n      const auditResult = execSync('npm audit --json', { encoding: 'utf8' });\n      const audit = JSON.parse(auditResult);\n      \n      const criticalCount = audit.metadata?.vulnerabilities?.critical || 0;\n      const highCount = audit.metadata?.vulnerabilities?.high || 0;\n      \n      if (criticalCount > 0 || highCount > 0) {\n        console.warn(`⚠️  Found ${criticalCount} critical and ${highCount} high severity vulnerabilities`);\n        return false;\n      }\n      \n      console.log('✅ npm audit passed');\n      return true;\n    } catch (error) {\n      // npm audit returns non-zero exit code when vulnerabilities found\n      const output = error.stdout || error.message;\n      if (output.includes('\"vulnerabilities\"')) {\n        const audit = JSON.parse(output);\n        const criticalCount = audit.metadata?.vulnerabilities?.critical || 0;\n        const highCount = audit.metadata?.vulnerabilities?.high || 0;\n        \n        if (criticalCount > 0 || highCount > 0) {\n          console.warn(`⚠️  Found ${criticalCount} critical and ${highCount} high severity vulnerabilities`);\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  findJavaScriptFiles() {\n    try {\n      const output = execSync('find . -name \"*.js\" -not -path \"./node_modules/*\" -not -path \"./codeql-db/*\"', { encoding: 'utf8' });\n      return output.trim().split('\\n').filter(line => line);\n    } catch {\n      return [];\n    }\n  }\n\n  findSourceFiles() {\n    try {\n      const output = execSync('find . -type f \\\\( -name \"*.js\" -o -name \"*.ts\" -o -name \"*.json\" \\\\) -not -path \"./node_modules/*\"', { encoding: 'utf8' });\n      return output.trim().split('\\n').filter(line => line);\n    } catch {\n      return [];\n    }\n  }\n\n  async analyzeFileForInputValidation(filePath) {\n    try {\n      const content = fs.readFileSync(filePath, 'utf8');\n      let issues = 0;\n      \n      // Check for unsafe patterns\n      const unsafePatterns = [\n        /eval\\s*\\(/,\n        /Function\\s*\\(/,\n        /innerHTML\\s*=/,\n        /document\\.write/,\n        /\\.exec\\s*\\(/,\n        /child_process.*exec/\n      ];\n      \n      for (const pattern of unsafePatterns) {\n        if (pattern.test(content)) {\n          console.warn(`⚠️  Potentially unsafe pattern found in ${filePath}`);\n          issues++;\n        }\n      }\n      \n      return issues;\n    } catch {\n      return 0;\n    }\n  }\n\n  async analyzeFileForSecrets(filePath) {\n    try {\n      const content = fs.readFileSync(filePath, 'utf8');\n      let issues = 0;\n      \n      // Check for potential secrets (simplified patterns)\n      const secretPatterns = [\n        /password\\s*=\\s*[\"'][^\"']+[\"']/i,\n        /api[_-]?key\\s*=\\s*[\"'][^\"']+[\"']/i,\n        /secret\\s*=\\s*[\"'][^\"']+[\"']/i,\n        /token\\s*=\\s*[\"'][^\"']+[\"']/i,\n        /aws[_-]?access[_-]?key/i,\n        /aws[_-]?secret/i\n      ];\n      \n      for (const pattern of secretPatterns) {\n        if (pattern.test(content)) {\n          // Check if it's using environment variables (acceptable)\n          if (!content.includes('process.env')) {\n            console.warn(`⚠️  Potential hardcoded secret in ${filePath}`);\n            issues++;\n          }\n        }\n      }\n      \n      return issues;\n    } catch {\n      return 0;\n    }\n  }\n\n  async createSimpleSBOM(sbomFile) {\n    try {\n      const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\n      \n      const sbom = {\n        bomFormat: 'CycloneDX',\n        specVersion: '1.4',\n        version: 1,\n        metadata: {\n          timestamp: new Date().toISOString(),\n          component: {\n            type: 'application',\n            name: packageJson.name,\n            version: packageJson.version\n          }\n        },\n        components: []\n      };\n      \n      // Add dependencies\n      const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };\n      for (const [name, version] of Object.entries(deps)) {\n        sbom.components.push({\n          type: 'library',\n          name: name,\n          version: version.replace(/^[\\^~]/, ''),\n          purl: `pkg:npm/${name}@${version.replace(/^[\\^~]/, '')}`\n        });\n      }\n      \n      fs.writeFileSync(sbomFile, JSON.stringify(sbom, null, 2));\n      console.log(`✅ Simple SBOM created: ${sbomFile}`);\n      return true;\n    } catch (error) {\n      console.error('Simple SBOM creation failed:', error.message);\n      return false;\n    }\n  }\n\n  getCacheAge() {\n    // Simplified - return age in days\n    return 0;\n  }\n\n  async analyzeDependencyCheckResults() {\n    // Simplified analysis\n    return true;\n  }\n\n  async analyzeCodeQLResults() {\n    // Simplified analysis\n    return true;\n  }\n\n  async analyzeESLintResults() {\n    // Simplified analysis\n    return true;\n  }\n\n  async compareSBOMs(_newSbomFile) {\n    // Simplified SBOM comparison\n    console.log('📊 SBOM comparison completed');\n  }\n}\n\nmodule.exports = SecurityChecker;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/root/repo/src/backlog/wsjf.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[1625,1689],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[1928,2008],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":73,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":73,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2498,2548],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2820,2883],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"class WSJFScoring {\n  constructor() {\n    this.fibonacci = [1, 2, 3, 5, 8, 13];\n    this.maxAgingMultiplier = 2.0;\n  }\n\n  calculateWSJF(item) {\n    const { value, time_criticality, risk_reduction, effort, created_at } = item;\n    \n    // Check for zero effort first, before validation\n    if (effort === 0) {\n      throw new Error('Effort cannot be zero for WSJF calculation');\n    }\n    \n    // Validate inputs are in fibonacci sequence\n    const validatedValue = this.validateFibonacci(value, 'value');\n    const validatedTimeCriticality = this.validateFibonacci(time_criticality, 'time_criticality');\n    const validatedRiskReduction = this.validateFibonacci(risk_reduction, 'risk_reduction');\n    const validatedEffort = this.validateFibonacci(effort, 'effort');\n    \n    // Calculate base WSJF\n    const costOfDelay = validatedValue + validatedTimeCriticality + validatedRiskReduction;\n    const baseWSJF = costOfDelay / validatedEffort;\n    \n    // Apply aging multiplier\n    const agingMultiplier = this.calculateAgingMultiplier(created_at);\n    const finalWSJF = baseWSJF * agingMultiplier;\n    \n    return {\n      base_wsjf: Math.round(baseWSJF * 100) / 100,\n      aging_multiplier: Math.round(agingMultiplier * 100) / 100,\n      final_wsjf: Math.round(finalWSJF * 100) / 100,\n      cost_of_delay: costOfDelay,\n      validated_scores: {\n        value: validatedValue,\n        time_criticality: validatedTimeCriticality,\n        risk_reduction: validatedRiskReduction,\n        effort: validatedEffort\n      }\n    };\n  }\n\n  validateFibonacci(value, fieldName) {\n    if (typeof value !== 'number' || value < 1) {\n      console.warn(`Invalid ${fieldName}: ${value}, defaulting to 3`);\n      return 3;\n    }\n    \n    // Find closest fibonacci number\n    const closest = this.fibonacci.reduce((prev, curr) => \n      Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev\n    );\n    \n    if (closest !== value) {\n      console.warn(`${fieldName} ${value} adjusted to nearest fibonacci: ${closest}`);\n    }\n    \n    return closest;\n  }\n\n  calculateAgingMultiplier(createdAt) {\n    if (!createdAt) return 1.0;\n    \n    try {\n      const created = new Date(createdAt);\n      const now = new Date();\n      const daysOld = (now - created) / (1000 * 60 * 60 * 24);\n      \n      // Apply aging: linear increase up to max multiplier over 90 days\n      const agingFactor = Math.min(daysOld / 90, 1.0);\n      return 1.0 + (agingFactor * (this.maxAgingMultiplier - 1.0));\n    } catch (error) {\n      console.warn(`Invalid date format: ${createdAt}`);\n      return 1.0;\n    }\n  }\n\n  scoreAndSortBacklog(items) {\n    const scoredItems = items.map(item => {\n      try {\n        const wsjfData = this.calculateWSJF(item);\n        return {\n          ...item,\n          wsjf: wsjfData\n        };\n      } catch (error) {\n        console.error(`Error scoring item ${item.id}:`, error.message);\n        return {\n          ...item,\n          wsjf: {\n            base_wsjf: 0,\n            aging_multiplier: 1.0,\n            final_wsjf: 0,\n            cost_of_delay: 0,\n            validated_scores: {\n              value: 3,\n              time_criticality: 3,\n              risk_reduction: 3,\n              effort: 3\n            }\n          }\n        };\n      }\n    });\n\n    // Sort by final WSJF descending\n    return scoredItems.sort((a, b) => b.wsjf.final_wsjf - a.wsjf.final_wsjf);\n  }\n\n  getActionableItems(items, scopeFilter = null) {\n    const actionableStatuses = ['NEW', 'REFINED', 'READY'];\n    \n    let filtered = items.filter(item => actionableStatuses.includes(item.status));\n    \n    if (scopeFilter) {\n      filtered = filtered.filter(item => scopeFilter(item));\n    }\n    \n    return filtered;\n  }\n\n  getNextReadyItem(items, scopeFilter = null) {\n    const actionable = this.getActionableItems(items, scopeFilter);\n    \n    // Prefer READY items, then REFINED, then NEW\n    const priorities = ['READY', 'REFINED', 'NEW'];\n    \n    for (const status of priorities) {\n      const candidates = actionable.filter(item => item.status === status);\n      if (candidates.length > 0) {\n        return candidates[0]; // Already sorted by WSJF\n      }\n    }\n    \n    return null;\n  }\n\n  updateItemStatus(items, itemId, newStatus) {\n    const item = items.find(i => i.id === itemId);\n    if (item) {\n      item.status = newStatus;\n      if (newStatus === 'DONE') {\n        item.completed_at = new Date().toISOString().split('T')[0];\n      }\n    }\n    return items;\n  }\n\n  getBacklogMetrics(items) {\n    const statusCounts = items.reduce((acc, item) => {\n      acc[item.status] = (acc[item.status] || 0) + 1;\n      return acc;\n    }, {});\n\n    const completedItems = items.filter(item => item.status === 'DONE' && item.completed_at);\n    const avgCycleTime = this.calculateAverageCycleTime(completedItems);\n\n    const topItems = items\n      .filter(item => ['NEW', 'REFINED', 'READY'].includes(item.status))\n      .slice(0, 5)\n      .map(item => ({\n        id: item.id,\n        title: item.title,\n        wsjf: item.wsjf?.final_wsjf || 0,\n        status: item.status\n      }));\n\n    return {\n      backlog_size_by_status: statusCounts,\n      avg_cycle_time_hours: avgCycleTime,\n      top_wsjf_items: topItems,\n      total_items: items.length\n    };\n  }\n\n  calculateAverageCycleTime(completedItems) {\n    if (completedItems.length === 0) return 0;\n\n    const cycleTimes = completedItems\n      .filter(item => item.created_at && item.completed_at)\n      .map(item => {\n        const created = new Date(item.created_at);\n        const completed = new Date(item.completed_at);\n        return (completed - created) / (1000 * 60 * 60); // hours\n      });\n\n    if (cycleTimes.length === 0) return 0;\n\n    return Math.round(cycleTimes.reduce((sum, time) => sum + time, 0) / cycleTimes.length);\n  }\n}\n\nmodule.exports = WSJFScoring;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/root/repo/src/lambda/prowler-ingest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/root/repo/src/lambda/remediation-generator.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/root/repo/src/lambda/risk-scoring.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
